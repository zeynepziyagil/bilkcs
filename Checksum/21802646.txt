////////////////ZEYNEP ZİYAGİL 21802646



`timescale 1ns / 1ps
//////
module controller_hlsm(input clk,edata,checksum,disprev_ld,disnext_ld,discount_ld,reset,
                  input logic [3:0] address_in,
                  input logic [7:0] data,
                  output logic [6:0] segments,
                  output logic [3:0] anode,
                  output logic [3:0] adrofled,
                  output logic [7:0] dataofled);
//create necessary inputs and outputs for memory
 logic enterd,disp,disn,ces,disc;
 logic [15:0] data_out;
 logic [4:0] adout;
 logic [3:0] adcont;
 //cretae memory module
 datapath dpt(clk,enterd,reset,disp,disn,ces,disc, address_in,data, data_out,adout, adcont);
 //create necessarry inputs and outputs for seven segment displayer
logic [4:0] num1,num2,num3,num4;
logic [6:0] segbef;
logic [3:0] anodex;
//create seven segment displayer
seven_segment s( clk,reset,num1,num2,num3,num4,segbef,anodex);
//debounce buttons
debounce bnc1(disprev_ld,clk,disprevbt);//to provide one by one address transition
debounce bnc2(disnext_ld,clk,disnextbt);//to provide one by one address transition
debounce bnc3(checksum,clk,checksbt);
debounce bnc4(discount_ld,clk,discountbt);
debounce bnc5(edata,clk,webt);
//for wait 10 second
logic a;
logic b;
logic c;
logic d;
wait10 w(a,clk,checksbt,c);
wait10 ww(b,clk,discountbt,d);
//define states
typedef enum logic [4:0] {S0,S1,S2,S3,S4,S5,S6,S7,S8,S9} statetype;
statetype state,nextstate;
//state register
always_ff@(posedge clk,posedge reset)
if(reset) state <=S0;
else state <=nextstate;
//next state logic
always_comb
case(state)
S0:begin
    enterd = 0;
    disp = 0;
    disn = 0;
    ces  = 0;
    disc  = 0;
    a = 1;
    b = 1;
    if(webt)
    nextstate = S1;
    else if(checksbt)
    nextstate = S5;
    else if(disnextbt & (adcont == address_in))
    nextstate = S3;
    else if(disprevbt & (adcont == address_in))
    nextstate = S4;
    else if(discountbt)
    nextstate = S7;
    else if(adcont != address_in)
    nextstate = S8;
    else 
    nextstate = S2;
    end
S1:begin
    enterd  = 1;
    disp = 0;  
    disn = 0;  
    ces  = 0;  
    disc  = 0;  
    nextstate = S2;
    end
S2:begin
    enterd = 0;
    disp = 0;  
    disn = 0;  
    ces  = 0;  
    disc  = 0;  
    if(webt)
    nextstate = S1;
    else if(checksbt)
    nextstate = S5;
    else if(disnextbt & (adcont == address_in))
    nextstate = S3;
    else if(disprevbt & (adcont == address_in))
    nextstate = S4;
    else if(discountbt)
    nextstate = S7;
    else if(adcont != address_in)
    nextstate = S8;
    else 
    nextstate = S2;   
    end
S3: begin
    enterd = 0;
    disp = 0;  
    disn = 1;  
    ces  = 0;  
    disc  = 0;  
    nextstate = S2; 
    end
S4: begin
    enterd = 0; 
    disp = 1;  
    disn = 0;  
    ces  = 0;  
    disc = 0;  
    nextstate = S2; 
    end
S5: begin
    enterd = 0;
    disp = 0;  
    disn = 0;  
    ces  = 1;  
    disc  = 0;  
    a = 0;
    nextstate = S6;
    end
S6:begin //showing 10 sec
    enterd = 0;
    disp = 0;  
    disn = 0;  
    ces  = 1;  
    disc  = 0;  
    if(c)
    begin
    a = 1;
    nextstate = S2;
    end 
    else 
    nextstate =S6;
    end
S7:begin
    enterd = 0;
    disp = 0;  
    disn = 0;  
    ces  = 0;  
    disc  = 1;  
    b = 0; 
    nextstate = S9; 
end
S8:begin
 enterd = 0;
 disp = 0;  
 disn = 0;  
 ces  = 0;  
 disc  = 0;  
    nextstate = S2; 
    end
S9:begin
   enterd = 0;
   disp = 0;  
   disn = 0;  
   ces  = 0;  
   disc  = 1;  
    if(d)
    begin
    b = 1;
    nextstate = S2;
    end 
    else 
    nextstate =S9;
    end
endcase
//digit logic to display in seven segment
always@(*)
begin
    if(ces|checksbt)
    begin
        num1 = adout;
        num2 = 5'b10000;
        num3 = data_out[7:4];
        num4 = data_out[3:0];
    end
    else if (discountbt|disc)
    begin
        num1 = data_out[15:12];
        num2 = data_out[11:8];
        num3 = data_out[7:4];
        num4 = data_out[3:0];
    end
    else
    begin
        num1 = adout;
        num2 = 5'b10001;
        num3 = data_out[7:4];
        num4 = data_out[3:0];
    end
end
//outputlogic
always_comb
begin
case(state)
S2:begin
    segments = segbef;
    anode = anodex;
   end 
S6:begin
    segments = segbef;
    anode = anodex;
   end 
S9:begin
  segments = segbef;
    anode = anodex;
   end 
endcase
adrofled = address_in;
dataofled = data;
end
endmodule



/////



`timescale 1ns / 1ps

///

module seven_segment(input logic clk,reset,
                             input logic [4:0] num1,num2,num3,num4,
                             output logic [6:0] segments,
                             output logic [3:0] anode );
 reg [17:0] rcounter; 
wire [1:0] LED_activate; 
always @(posedge clk or posedge reset)
begin 
 if(reset==1)
  rcounter <= 0;
 else
  rcounter <= rcounter + 1;
end 
assign LED_activate = rcounter[17:16];
logic [4:0] LEDS;

  always @(*)
    begin
        case(LED_activate)
        2'b00: begin
            anode= 4'b0111; 
            
            LEDS = num1;
             end
        2'b01: begin
            anode = 4'b1011; 
            
            LEDS = num2;
                end
        2'b10: begin
            anode = 4'b1101; 
            
            LEDS = num3 ;
             
              end
        2'b11: begin
            anode = 4'b1110; 
            
             LEDS =  num4;
             // the second hex-digit of the 8-bit number 
               end   
        default:begin
             anode = 4'b0111; 
            // activate LED1 and Deactivate LED2, LED3, LED4
           LEDS = 5'b00000;
            end
        endcase
    end
     always @(*)
    begin
        case(LEDS)
        5'b00000: segments = 7'b100_0000; // "0"     
        5'b00001: segments = 7'b111_1001;//" 
        5'b00010: segments = 7'b010_0100; // "2" 
        5'b00011: segments = 7'b011_0000; // "3" 
        5'b00100: segments = 7'b001_1001; // "4" 
        5'b00101: segments = 7'b001_0010; // "5" 
        5'b00110: segments = 7'b000_0010; // "6" 
        5'b00111: segments = 7'b111_1000; // "7" 
        5'b01000: segments = 7'b000_0000; // "8"     
        5'b01001: segments = 7'b001_1000; // "9" 
        5'b01010: segments = 7'b000_1000; // "A" 
        5'b01011: segments = 7'b000_0011; // "B" 
        5'b01100: segments = 7'b100_0110; // "C" 
        5'b01101: segments = 7'b010_0001; // "D"
        5'b01110: segments = 7'b000_0110; // "E"  
        5'b01111: segments = 7'b000_1110; // "F" 
        5'b10000: segments = 7'b011_0111; // "=" 
        5'b10001: segments = 7'b011_1111; // "-" 
        default: segments = 7'b111_1111; // ""
        endcase
    end
endmodule



////////////

`timescale 1ns / 1ps

module datapath(input logic clk,enterd,reset,disp,disn,ces,disc,
               input logic [3:0] address_in,
               input logic [7:0] data,
               output logic [15:0] data_out,
               output logic [4:0] adout,
               output logic [3:0] adcont);
//create an memory array 
logic [7:0] arr [15:0];
//define outputs for checksum
integer i;
logic[7: 0] xsum;
logic [7:0]csum;
logic [15:0]counter;
//adr_reg for follow the desired address
logic [3:0] address_reg;
//checksum
//checksum chcksm(mem,clk,ch,cs,counter);
//clock divider

//flip-flop
always_ff@(posedge clk or posedge reset)
    if(reset)
    begin
        adcont <= address_in;
        address_reg <= address_in;
        arr[0] <= 8'b00000000;
        arr[1] <= 8'b00000001;
        arr[2] <= 8'b00000010;
        arr[3] <= 8'b00000011;
        arr[4] <= 8'b00000100;
        arr[5] <= 8'b00000101;
        arr[6] <= 8'b00000110;
        arr[7] <= 8'b00000111;
        arr[8] <= 8'b00001000;
        arr[9] <= 8'b00001001;
        arr[10] <= 8'b00001010;
        arr[11] <= 8'b00001011;
        arr[12] <= 8'b00001100;
        arr[13] <= 8'b00001101;
        arr[14] <= 8'b00001110;
        arr[15] <= 8'b00001111;    
    end
    else if(enterd)
    begin
     arr[address_in] <= data;
     address_reg <= address_in;
     end
    else if(disp) address_reg <= address_reg -4'b0001;//to avoid randomized transitions debounce module is used
    else if(ces) begin
    address_reg <= address_in;
    counter = 0;
    xsum = 0;
    for(i = 0 ; i <16; i = i +1)
    begin
    xsum = xsum + (arr[i]);
    counter = counter + 1;
    end
    csum = ~xsum + 1;
     end   
    else if(disn) address_reg <= address_reg +4'b0001;//to avoid randomized transitions debounce module is used
    else if(adcont != address_in ) 
    begin
    address_reg <=address_in;
    adcont <= address_in;
    end
//for data reading
always_comb
begin
    if(ces)
    begin
        data_out = {8'b00000000,csum};
        adout = 5'b01100;//code for C
    end
    else if(disc)
    begin
        data_out = counter;
        adout = 5'b00000; //wont be used in seven segment
    end
    else
    begin 
        data_out = {8'b00000000,arr[address_reg]};
        adout = {1'b0,address_reg};
    end
    end 
   
endmodule
//////////

////


`timescale 1ns / 1ps
module debounce(input pb_1,clk,output pb_out);
wire slow_clk;
wire Q1,Q2,Q2_bar;
my_dff d1(clk, pb_1,Q1 );
my_dff d2(clk, Q1,Q2 );
assign Q2_bar = ~Q2;
assign pb_out = Q1 & Q2_bar;
endmodule
// D-flip-flop for debouncing module 
module my_dff(input DFF_CLOCK, D, output reg Q);

    always @ (posedge DFF_CLOCK) begin
        Q <= D;
    end

endmodule

////////

`timescale 1ns / 1ps

module wait10(input logic buttin,clk,reset,output logic buttout);
logic slow_clk;
wire q1 = 1 ;
wire q2;
clock_div u(clk,reset,slow_clk);
my_dff d1(slow_clk, buttin,q2 );
always_ff@(posedge clk,posedge slow_clk)
if(buttin)
buttout = 0;
else if(slow_clk)
buttout = ~q2;
else
buttout = ~q1;
endmodule
// Slow clock for debouncing 
module clock_div(input Clk_100M,reset, output reg slow_clk

    );
    reg [31:0]counter=0;
    always @(posedge Clk_100M,posedge reset)
    if(reset) counter <= 0;
    else
    begin
        counter <= (counter>=999_999_999)?0:counter+1;
        slow_clk <= (counter < 500_000_000)?1'b0:1'b1;
    end
endmodule


//////////////////
## This file is a general .xdc for the Basys3 rev B board
## To use it in a project:
## - uncomment the lines corresponding to used pins
## - rename the used ports (in each line, after get_ports) according to the top level signal names in the project

## Clock signal
set_property PACKAGE_PIN W5 [get_ports clk]							
	set_property IOSTANDARD LVCMOS33 [get_ports clk]
	create_clock -add -name sys_clk_pin -period 10.00 -waveform {0 5} [get_ports clk]
 
## Switches
set_property PACKAGE_PIN V17 [get_ports {address_in[0]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {address_in[0]}]
set_property PACKAGE_PIN V16 [get_ports {address_in[1]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {address_in[1]}]
set_property PACKAGE_PIN W16 [get_ports {address_in[2]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {address_in[2]}]
set_property PACKAGE_PIN W17 [get_ports {address_in[3]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {address_in[3]}]
set_property PACKAGE_PIN W15 [get_ports {reset}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {reset}]
#set_property PACKAGE_PIN V15 [get_ports {sw[5]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {sw[5]}]
#set_property PACKAGE_PIN W14 [get_ports {sw[6]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {sw[6]}]
#set_property PACKAGE_PIN W13 [get_ports {sw[7]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {sw[7]}]
set_property PACKAGE_PIN V2 [get_ports {data[0]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {data[0]}]
set_property PACKAGE_PIN T3 [get_ports {data[1]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {data[1]}]
set_property PACKAGE_PIN T2 [get_ports {data[2]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {data[2]}]
set_property PACKAGE_PIN R3 [get_ports {data[3]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {data[3]}]
set_property PACKAGE_PIN W2 [get_ports {data[4]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {data[4]}]
set_property PACKAGE_PIN U1 [get_ports {data[5]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {data[5]}]
set_property PACKAGE_PIN T1 [get_ports {data[6]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {data[6]}]
set_property PACKAGE_PIN R2 [get_ports {data[7]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {data[7]}]

## LEDs
set_property PACKAGE_PIN U16 [get_ports {adrofled[0]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {adrofled[0]}]
set_property PACKAGE_PIN E19 [get_ports {adrofled[1]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {adrofled[1]}]
set_property PACKAGE_PIN U19 [get_ports {adrofled[2]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {adrofled[2]}]
set_property PACKAGE_PIN V19 [get_ports {adrofled[3]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {adrofled[3]}]
#set_property PACKAGE_PIN W18 [get_ports {led[4]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {led[4]}]
#set_property PACKAGE_PIN U15 [get_ports {led[5]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {led[5]}]
#set_property PACKAGE_PIN U14 [get_ports {led[6]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {led[6]}]
#set_property PACKAGE_PIN V14 [get_ports {led[7]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {led[7]}]
set_property PACKAGE_PIN V13 [get_ports {dataofled[0]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {dataofled[0]}]
set_property PACKAGE_PIN V3 [get_ports {dataofled[1]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {dataofled[1]}]
set_property PACKAGE_PIN W3 [get_ports {dataofled[2]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {dataofled[2]}]
set_property PACKAGE_PIN U3 [get_ports {dataofled[3]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {dataofled[3]}]
set_property PACKAGE_PIN P3 [get_ports {dataofled[4]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {dataofled[4]}]
set_property PACKAGE_PIN N3 [get_ports {dataofled[5]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {dataofled[5]}]
set_property PACKAGE_PIN P1 [get_ports {dataofled[6]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {dataofled[6]}]
set_property PACKAGE_PIN L1 [get_ports {dataofled[7]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {dataofled[7]}]
	
##7-segment display (Active low, seg[0]:CA and seg[6]:CG )
set_property PACKAGE_PIN W7 [get_ports {segments[0]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {segments[0]}]
set_property PACKAGE_PIN W6 [get_ports {segments[1]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {segments[1]}]
set_property PACKAGE_PIN U8 [get_ports {segments[2]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {segments[2]}]
set_property PACKAGE_PIN V8 [get_ports {segments[3]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {segments[3]}]
set_property PACKAGE_PIN U5 [get_ports {segments[4]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {segments[4]}]
set_property PACKAGE_PIN V5 [get_ports {segments[5]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {segments[5]}]
set_property PACKAGE_PIN U7 [get_ports {segments[6]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {segments[6]}]

#set_property PACKAGE_PIN V7 [get_ports dp]							
	#set_property IOSTANDARD LVCMOS33 [get_ports dp]

set_property PACKAGE_PIN U2 [get_ports {anode[0]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {anode[0]}]
set_property PACKAGE_PIN U4 [get_ports {anode[1]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {anode[1]}]
set_property PACKAGE_PIN V4 [get_ports {anode[2]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {anode[2]}]
set_property PACKAGE_PIN W4 [get_ports {anode[3]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {anode[3]}]

##PushButtons (generate LOW output when they are at rest, and a HIGH output only when they are pressed)
set_property PACKAGE_PIN U18 [get_ports edata]						
	set_property IOSTANDARD LVCMOS33 [get_ports edata]
set_property PACKAGE_PIN T18 [get_ports checksum]						
	set_property IOSTANDARD LVCMOS33 [get_ports checksum]
set_property PACKAGE_PIN W19 [get_ports disprev_ld]						
	set_property IOSTANDARD LVCMOS33 [get_ports disprev_ld]
set_property PACKAGE_PIN T17 [get_ports disnext_ld]						
	set_property IOSTANDARD LVCMOS33 [get_ports disnext_ld]
set_property PACKAGE_PIN U17 [get_ports discount_ld]						
	set_property IOSTANDARD LVCMOS33 [get_ports discount_ld]

##Pmod Header JA
##Sch name = JA1
#set_property PACKAGE_PIN J1 [get_ports {JA[0]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {JA[0]}]
##Sch name = JA2
#set_property PACKAGE_PIN L2 [get_ports {JA[1]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {JA[1]}]
##Sch name = JA3
#set_property PACKAGE_PIN J2 [get_ports {JA[2]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {JA[2]}]
##Sch name = JA4
#set_property PACKAGE_PIN G2 [get_ports {JA[3]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {JA[3]}]
##Sch name = JA7
#set_property PACKAGE_PIN H1 [get_ports {JA[4]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {JA[4]}]
##Sch name = JA8
#set_property PACKAGE_PIN K2 [get_ports {JA[5]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {JA[5]}]
##Sch name = JA9
#set_property PACKAGE_PIN H2 [get_ports {JA[6]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {JA[6]}]
##Sch name = JA10
#set_property PACKAGE_PIN G3 [get_ports {JA[7]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {JA[7]}]

##Pmod Header JB
##Sch name = JB1
#set_property PACKAGE_PIN A14 [get_ports {JB[0]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {JB[0]}]
##Sch name = JB2
#set_property PACKAGE_PIN A16 [get_ports {JB[1]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {JB[1]}]
##Sch name = JB3
#set_property PACKAGE_PIN B15 [get_ports {JB[2]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {JB[2]}]
##Sch name = JB4
#set_property PACKAGE_PIN B16 [get_ports {JB[3]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {JB[3]}]
##Sch name = JB7
#set_property PACKAGE_PIN A15 [get_ports {JB[4]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {JB[4]}]
##Sch name = JB8
#set_property PACKAGE_PIN A17 [get_ports {JB[5]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {JB[5]}]
##Sch name = JB9
#set_property PACKAGE_PIN C15 [get_ports {JB[6]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {JB[6]}]
##Sch name = JB10 
#set_property PACKAGE_PIN C16 [get_ports {JB[7]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {JB[7]}]

##Pmod Header JC
##Sch name = JC1
#set_property PACKAGE_PIN K17 [get_ports {JC[0]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {JC[0]}]
##Sch name = JC2
#set_property PACKAGE_PIN M18 [get_ports {JC[1]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {JC[1]}]
##Sch name = JC3
#set_property PACKAGE_PIN N17 [get_ports {JC[2]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {JC[2]}]
##Sch name = JC4
#set_property PACKAGE_PIN P18 [get_ports {JC[3]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {JC[3]}]
##Sch name = JC7
#set_property PACKAGE_PIN L17 [get_ports {JC[4]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {JC[4]}]
##Sch name = JC8
#set_property PACKAGE_PIN M19 [get_ports {JC[5]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {JC[5]}]
##Sch name = JC9
#set_property PACKAGE_PIN P17 [get_ports {JC[6]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {JC[6]}]
##Sch name = JC10
#set_property PACKAGE_PIN R18 [get_ports {JC[7]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {JC[7]}]

##Pmod Header JXADC
##Sch name = XA1_P
#set_property PACKAGE_PIN J3 [get_ports {JXADC[0]}]				
	#set_property IOSTANDARD LVCMOS33 [get_ports {JXADC[0]}]
##Sch name = XA2_P
#set_property PACKAGE_PIN L3 [get_ports {JXADC[1]}]				
	#set_property IOSTANDARD LVCMOS33 [get_ports {JXADC[1]}]
##Sch name = XA3_P
#set_property PACKAGE_PIN M2 [get_ports {JXADC[2]}]				
	#set_property IOSTANDARD LVCMOS33 [get_ports {JXADC[2]}]
##Sch name = XA4_P
#set_property PACKAGE_PIN N2 [get_ports {JXADC[3]}]				
	#set_property IOSTANDARD LVCMOS33 [get_ports {JXADC[3]}]
##Sch name = XA1_N
#set_property PACKAGE_PIN K3 [get_ports {JXADC[4]}]				
	#set_property IOSTANDARD LVCMOS33 [get_ports {JXADC[4]}]
##Sch name = XA2_N
#set_property PACKAGE_PIN M3 [get_ports {JXADC[5]}]				
	#set_property IOSTANDARD LVCMOS33 [get_ports {JXADC[5]}]
##Sch name = XA3_N
#set_property PACKAGE_PIN M1 [get_ports {JXADC[6]}]				
	#set_property IOSTANDARD LVCMOS33 [get_ports {JXADC[6]}]
##Sch name = XA4_N
#set_property PACKAGE_PIN N1 [get_ports {JXADC[7]}]				
	#set_property IOSTANDARD LVCMOS33 [get_ports {JXADC[7]}]

##VGA Connector
#set_property PACKAGE_PIN G19 [get_ports {vgaRed[0]}]				
	#set_property IOSTANDARD LVCMOS33 [get_ports {vgaRed[0]}]
#set_property PACKAGE_PIN H19 [get_ports {vgaRed[1]}]				
	#set_property IOSTANDARD LVCMOS33 [get_ports {vgaRed[1]}]
#set_property PACKAGE_PIN J19 [get_ports {vgaRed[2]}]				
	#set_property IOSTANDARD LVCMOS33 [get_ports {vgaRed[2]}]
#set_property PACKAGE_PIN N19 [get_ports {vgaRed[3]}]				
	#set_property IOSTANDARD LVCMOS33 [get_ports {vgaRed[3]}]
#set_property PACKAGE_PIN N18 [get_ports {vgaBlue[0]}]				
	#set_property IOSTANDARD LVCMOS33 [get_ports {vgaBlue[0]}]
#set_property PACKAGE_PIN L18 [get_ports {vgaBlue[1]}]				
	#set_property IOSTANDARD LVCMOS33 [get_ports {vgaBlue[1]}]
#set_property PACKAGE_PIN K18 [get_ports {vgaBlue[2]}]				
	#set_property IOSTANDARD LVCMOS33 [get_ports {vgaBlue[2]}]
#set_property PACKAGE_PIN J18 [get_ports {vgaBlue[3]}]				
	#set_property IOSTANDARD LVCMOS33 [get_ports {vgaBlue[3]}]
#set_property PACKAGE_PIN J17 [get_ports {vgaGreen[0]}]				
	#set_property IOSTANDARD LVCMOS33 [get_ports {vgaGreen[0]}]
#set_property PACKAGE_PIN H17 [get_ports {vgaGreen[1]}]				
	#set_property IOSTANDARD LVCMOS33 [get_ports {vgaGreen[1]}]
#set_property PACKAGE_PIN G17 [get_ports {vgaGreen[2]}]				
	#set_property IOSTANDARD LVCMOS33 [get_ports {vgaGreen[2]}]
#set_property PACKAGE_PIN D17 [get_ports {vgaGreen[3]}]				
	#set_property IOSTANDARD LVCMOS33 [get_ports {vgaGreen[3]}]
#set_property PACKAGE_PIN P19 [get_ports Hsync]						
	#set_property IOSTANDARD LVCMOS33 [get_ports Hsync]
#set_property PACKAGE_PIN R19 [get_ports Vsync]						
	#set_property IOSTANDARD LVCMOS33 [get_ports Vsync]

##USB-RS232 Interface
#set_property PACKAGE_PIN B18 [get_ports RsRx]						
	#set_property IOSTANDARD LVCMOS33 [get_ports RsRx]
#set_property PACKAGE_PIN A18 [get_ports RsTx]						
	#set_property IOSTANDARD LVCMOS33 [get_ports RsTx]

##USB HID (PS/2)
#set_property PACKAGE_PIN C17 [get_ports PS2Clk]						
	#set_property IOSTANDARD LVCMOS33 [get_ports PS2Clk]
	#set_property PULLUP true [get_ports PS2Clk]
#set_property PACKAGE_PIN B17 [get_ports PS2Data]					
	#set_property IOSTANDARD LVCMOS33 [get_ports PS2Data]	
	#set_property PULLUP true [get_ports PS2Data]

##Quad SPI Flash
##Note that CCLK_0 cannot be placed in 7 series devices. You can access it using the
##STARTUPE2 primitive.
#set_property PACKAGE_PIN D18 [get_ports {QspiDB[0]}]				
	#set_property IOSTANDARD LVCMOS33 [get_ports {QspiDB[0]}]
#set_property PACKAGE_PIN D19 [get_ports {QspiDB[1]}]				
	#set_property IOSTANDARD LVCMOS33 [get_ports {QspiDB[1]}]
#set_property PACKAGE_PIN G18 [get_ports {QspiDB[2]}]				
	#set_property IOSTANDARD LVCMOS33 [get_ports {QspiDB[2]}]
#set_property PACKAGE_PIN F18 [get_ports {QspiDB[3]}]				
	#set_property IOSTANDARD LVCMOS33 [get_ports {QspiDB[3]}]
#set_property PACKAGE_PIN K19 [get_ports QspiCSn]					
	#set_property IOSTANDARD LVCMOS33 [get_ports QspiCSn]
