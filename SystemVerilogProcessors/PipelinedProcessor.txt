//Testbench

module testbench();

logic clk;
logic reset;
logic [31:0] WriteDataM, ResultW;
logic MemWriteM, RegWriteW, StallF,FlushE;
logic [31:0] PcF;
logic [31:0] instrD;
// instantiate device to be tested
Top top (clk, reset, PcF, instrD, WriteDataM, ResultW,MemWriteM, RegWriteW, StallF,FlushE);
// initialize test
initial
begin
reset <= 1; #5; reset <= 0;
end
// generate clock to sequence tests

  
  	initial 
      begin
        for (int i = 0; i < 50; i=i+1) 
          begin
        	clk <= 1; #5; clk <= 0; #5;
      	end
    end
int en = 0;
  always @(posedge clk) begin
      en = en + 1;
    $display("line=%2d PcF =0x%h instrD=0x%h ResultW=0x%h WriteDataM=0x%h MemWriteM=0x%h RegWriteW=0x%h ",en, PcF, instrD, ResultW, WriteDataM, MemWriteM, RegWriteW);
    end

endmodule




//*********************************************************
module Top(input logic clk, reset,
           output logic [31:0]PcF, instrD, WriteDataM, ResultW,
           output logic MemWriteM, RegWriteW, StallF,FlushE
           );
    logic [31:0] instr; 
    
    mips themips (clk, reset, instr, MemWriteM,RegWriteW,WriteDataM,PcF,instrD, ResultW, StallF,FlushE);
    imem theimem (PcF[7:2], instr);

endmodule


module PipeFtoD(input logic[31:0] instr, PcPlus4F,
                input logic EN, clk, reset,		// StallD will be connected as this EN
                output logic[31:0] instrD, PcPlus4D);

                always_ff @(posedge clk)
		    if(reset)
                        begin
                        instrD<=0;
                        PcPlus4D<=0;
                        end
                    else if(EN)
                        begin
                        instrD<=instr;
                        PcPlus4D<=PcPlus4F;
                        end
                
endmodule


module PipeWtoF(input logic[31:0] PC,
                input logic EN, clk, reset,		// StallF will be connected as this EN
                output logic[31:0] PCF);

                always_ff @(posedge clk)
		if(reset)
		begin
			PCF <=0;
		end  
		else if(EN)
		begin
			PCF<=PC;
		end
                
endmodule

// *******************************************************************************
// Below, write the modules for the pipes PipeDtoE, PipeEtoM, PipeMtoW yourselves.
// Don't forget to connect Control signals in these pipes as well.
// *******************************************************************************

module PipeDtoE(input logic RegWriteD, MemtoRegD, MemWriteD, 
                input logic [2:0] ALUControlD,
                input logic ALUSrcD, RegDstD, 
                input logic [31:0] RD1, RD2,
                input logic [4:0] RsD, RtD, RdD,
                input logic [31:0] SignImmD,
                input logic clk, reset, FlushE,
                output logic RegWriteE, MemtoRegE, MemWriteE, 
                output logic [2:0] ALUControlE,
                output logic ALUSrcE, RegDstE,
                output logic [31:0] RE1, RE2,
                output logic [4:0] RsE, RtE, RdE,   // FlushE will be connected
                output logic [31:0] SignImmE);
                // to be filled 
                
                always_ff @(posedge clk, posedge reset)begin
        if(reset )
        begin
            RE1 <= 0;
            RE2 <= 0;
            RsE <= 0;
            RtE <= 0;
            RdE <= 0;
            SignImmE <= 0;
            RegWriteE <= 0;
            MemtoRegE <= 0;
            MemWriteE <= 0;
            ALUControlE <= 0;
            ALUSrcE <= 0;
            RegDstE <= 0;
            
        end
        else if(FlushE)
        begin
            RE1 <= 0;
            RE2 <= 0;
            RsE <= 0;
            RtE <= 0;
            RdE <= 0;
            SignImmE <= 0;
            RegWriteE <= 0;
            MemtoRegE <= 0;
            MemWriteE <= 0;
            ALUControlE <= 0;
            ALUSrcE <= 0;
            RegDstE <= 0;
           
        end
        else
        begin
            RE1 <= RD1;
            RE2 <= RD2;
            RsE <= RsD;
            RtE <= RtD;
            RdE <= RtD;
            SignImmE <= SignImmD;
            RegWriteE <= RegWriteD;
            MemtoRegE <= MemtoRegD;
            MemWriteE <= MemWriteD;
            ALUControlE <= ALUControlD;
            ALUSrcE <= ALUSrcD;
            RegDstE <= RegDstD;
           
        end
    end
                     
endmodule

module PipeEtoM(input logic RegWriteE, MemtoRegE, MemWriteE,
                input logic [31:0] ALUOutE, WriteDataE,
                input logic [4:0] WriteRegE,
                input logic clk,reset,
                output logic RegWriteM, MemtoRegM, MemWriteM, 
                output logic [31:0] ALUOutM, WriteDataM,
                output logic [4:0] WriteRegM);
                
                 always_ff @(posedge clk, posedge reset) begin
        if (reset)
        begin
            ALUOutM <= 0;
            WriteDataM <= 0;
            WriteRegM <= 0;
          	RegWriteM <= 0;
            MemtoRegM <= 0;
            MemWriteM <= 0;
        end
        else
        begin
            
            ALUOutM <= ALUOutE;
            WriteDataM <= WriteDataE;
            WriteRegM <= WriteRegE;
            RegWriteM <= RegWriteE;
            MemtoRegM <= MemtoRegE;
            MemWriteM <= MemWriteE;
        end
    end
endmodule


module PipeMtoW(input logic RegWriteM, MemtoRegM, 
                input logic [31:0] ReadDataM, ALUOutM,
                input logic [4:0] WriteRegM,
                input logic clk,reset,
                output logic RegWriteW, MemtoRegW,  
                output logic [31:0] ReadDataW, ALUOutW,
                output logic [4:0] WriteRegW);  
		
		always_ff @(posedge clk, posedge reset) begin
		    if(reset)
            begin
                ReadDataW <= 0;
                ALUOutW <= 0;
                WriteRegW <= 0;
                RegWriteW <= 0;
                MemtoRegW <= 0;
            end
            else
            begin
                ALUOutW <= ALUOutM;
                WriteRegW <= WriteRegM;
                RegWriteW <= RegWriteM;
                MemtoRegW <= MemtoRegM;
                ReadDataW <= ReadDataM;
            end
        end
endmodule




module datapath (input  logic clk, reset, 
                 input logic [31:0] instr,
		         input  logic[2:0]  ALUControlD,
		         input logic RegWriteD, MemtoRegD, MemWriteD,
		         input logic ALUSrcD, RegDstD ,	BranchD,
		         
		         output logic [31:0] PcF, instrD, 
		         output logic [31:0] ResultW, WriteDataM,
		         output logic MemWriteM, RegWriteW,
		         output logic StallF, FlushE
		         ); 

//logic definitions
  
    logic ALUSrcE, RegWriteE,MemToRegE,MemWriteE, RegDstE;
    logic [2:0] ALUControlE;
    logic [4:0] RsE, RtE, RdE, WriteRegE;
    logic [31:0] PcPlus4E, SignImmE, WriteDataE,SrcBE, SrcAE, RD1E, RD2E;
    logic [31:0] ALUOutE;
	logic RegWriteM,MemToRegM;
	logic [31:0] ALUOutM, ReadDataM;
	logic [4:0] WriteRegM;
	logic [31:0] SignImmD, SignImmSh, RD1D, RD2D, PcPlus4D, PcBranchD;
	logic [4:0] RsD, RtD, RdD;
	logic EqualD, PcSrcD; 
	logic [31:0] PcPlus4F, PcNext;
	logic MemToRegW;
	logic [31:0] ReadDataW, ALUOutW;
	logic [4:0] WriteRegW;
    logic [31:0] Fr1D, Fr2D; 
  
   
    //hazardss
    logic [1:0] ForwardAE, ForwardBE;
    logic  StallD,ForwardAD, ForwardBD;
    
	
	HazardUnit thehazardunit( RegWriteW,BranchD,WriteRegW, WriteRegE,RegWriteM,MemToRegM,
                WriteRegM,RegWriteE,MemToRegE,RsE,RtE,RsD,RtD,
                ForwardAE,ForwardBE,FlushE,StallD,StallF, ForwardAD, ForwardBD);
    
 
    adder pc4adder(PcF, 32'b100, PcPlus4F); 
    
	PipeFtoD fetchxdecode(instr, PcPlus4F, ~StallD, clk, reset, instrD, PcPlus4D); 
	
    regfile theregfile (clk, RegWriteW, instrD[25:21], instrD[20:16],WriteRegW, ResultW, RD1D, RD2D);
    
    assign RsD = instrD[25:21];
	assign RtD = instrD[20:16];
	assign RdD = instrD[15:11];
	
    signext thesignExt(instrD[15:0], SignImmD);
    
    sl2 sl2(SignImmD,SignImmSh);
    
    adder adderPCBranch(SignImmSh, PcPlus4D, PcBranchD);

  mux2 #(32) mD1(RD1D, ALUOutM, ForwardAD, Fr1D);
    
  mux2 #(32) mD2(RD2D, ALUOutM, ForwardBD,Fr2D);
    
  assign EqualD = (Fr1D == Fr2D);
	assign PcSrcD = EqualD & BranchD;
    
   
  PipeDtoE decodexexecute( RegWriteD, MemtoRegD, MemWriteD,ALUControlD, ALUSrcD, RegDstD,
                    RD1D, RD2D, RsD, RtD, RdD,SignImmD, clk, reset, 
                    FlushE, RegWriteE,MemToRegE, MemWriteE, ALUControlE,ALUSrcE, 
                    RegDstE , RD1E, RD2E,RsE, RtE, RdE,SignImmE);
           
 		 mux2 #(5) regd(RtE, RdE,RegDstE,WriteRegE);
      
     	 mux4 #(32) fAE(RD1E, ResultW, ALUOutM, 32'b0,ForwardAE,SrcAE);
		
     	 mux4 #(32) fBE(RD2E, ResultW, ALUOutM, 32'b0,ForwardBE,WriteDataE);
      
  		mux2 #(32) alsrc(WriteDataE, SignImmE,ALUSrcE,SrcBE);
   	   
      
      alu thealu(SrcAE, SrcBE,ALUControlE,ALUOutE);
      
      PipeEtoM executexmemory(RegWriteE, MemToRegE, MemWriteE,
                    ALUOutE,WriteDataE,WriteRegE,clk,reset,
                    RegWriteM, MemToRegM, MemWriteM,
                    ALUOutM,WriteDataM,WriteRegM);
      
      dmem datamemory( clk, MemWriteM,ALUOutM, WriteDataM, ReadDataM);
       
       PipeMtoW memoryxwrite(RegWriteM, MemToRegM,ReadDataM, ALUOutM,
                    WriteRegM,clk,reset, RegWriteW,MemToRegW,
                    ReadDataW, ALUOutW,WriteRegW);
                    
  mux2 #(32) memreg( ALUOutW, ReadDataW,MemToRegW, ResultW);
       
  mux2 #(32) porgc(PcPlus4F, PcBranchD,PcSrcD,PcNext);
       
       PipeWtoF writexfetch(PcNext,~StallF, clk, reset,PcF);

endmodule



module HazardUnit( input logic RegWriteW, BranchD,
                input logic [4:0] WriteRegW, WriteRegE,
                input logic RegWriteM,MemtoRegM,
                input logic [4:0] WriteRegM,
                input logic RegWriteE,MemToRegE, 		// Add or remove input-outputs if necessary
                input logic [4:0] rsE,rtE,
                input logic [4:0] rsD,rtD,
                output logic [1:0] ForwardAE,ForwardBE,
                output logic FlushE,StallD,StallF,
                output logic ForwardAD, ForwardBD
                 );
    logic stall_lw, stall_brch;
    always_comb begin
    

    ForwardAD = (rsD != 0) & (rsD == WriteRegM) & RegWriteM;
    ForwardBD = (rtD != 0) & (rtD == WriteRegM) & RegWriteM;
      
      
    stall_lw = ((rsD== rtE) | (rtD== rtE)) & MemToRegE;
      
    stall_brch = (BranchD & RegWriteE & (WriteRegE == rsD | WriteRegE == rtD))|(BranchD & MemtoRegM & (WriteRegM == rsD | 			WriteRegM == rtD));
    StallF <= stall_lw | stall_brch;
    StallD <= stall_lw | stall_brch;
    FlushE <= stall_lw | stall_brch;
   

	if ((rsE != 0) & (rsE == WriteRegM) & RegWriteM) begin
    ForwardAE = 2'b10;
    end
    else if ((rsE != 0) & (rsE == WriteRegW) & RegWriteW) begin
    ForwardAE = 2'b01;
    end
    else ForwardAE = 2'b00;
    
    if ((rtE != 5'd0) & (rtE == WriteRegM) & RegWriteM)begin
    ForwardBE = 2'b10;
    end
    else if ((rtE != 5'd0) & (rtE == WriteRegW) & RegWriteW) begin
    ForwardBE = 2'b01;
    end
    else ForwardBE = 2'b00;
    
    end
endmodule


module mips (input  logic clk, reset,
             input  logic[31:0]  instr,
             output logic MemWriteM,RegWriteW,
             output logic[31:0]  WriteDataM,PcF,instrOut, ResultW,
             output logic StallF,FlushE
             );

  logic MemToRegD,ALUSrcD,RegDstD,BranchD, MemWriteD, RegWriteD;
  logic [31:0] instrD;
  logic [2:0]  ALUControlD;
  assign instrOut = instr;



datapath datapath1 (clk, reset, instr,ALUControlD, RegWriteD,MemToRegD, MemWriteD,
             ALUSrcD,RegDstD,BranchD,PcF, instrD, ResultW, WriteDataM, MemWriteM, RegWriteW, StallF,FlushE);
  
controller conrt (instrD[31:26], instrD[5:0],MemToRegD, MemWriteD,ALUSrcD,RegDstD, RegWriteD,ALUControlD,BranchD);


endmodule

module imem ( input logic [5:0] addr, output logic [31:0] instr);


	always_comb
	   case ({addr,2'b00})		  

/*     
//no hazards test
8'h00: instr = 32'h20100009; 
8'h04: instr = 32'h20110006; 
8'h08: instr = 32'h20120007;
8'h0c: instr = 32'h20150001;
8'h10: instr = 32'h0200A022;
8'h14: instr = 32'h02119820; 
8'h18: instr = 32'hAE110000; 
8'h1c: instr = 32'h8E320000;
8'h20: instr = 32'h12340003;
8'h24: instr = 32'h02939824;
8'h28: instr = 32'h02908025;
*/
/* //load use hazard test       
8'h00: instr = 32'h20100009; 
8'h04: instr = 32'h20110006; 
8'h08: instr = 32'h20120007;
8'h0c: instr = 32'h20150001;
8'h10: instr = 32'h0200A022;
8'h14: instr = 32'h8E110000; 
8'h18: instr = 32'h02309020; 
 */   
/* //compute use hazard test       
8'h00: instr = 32'h20100009; 
8'h04: instr = 32'h20110006; 
8'h08: instr = 32'h20120007;
8'h0c: instr = 32'h20150001;
8'h10: instr = 32'h0200A022;
8'h14: instr = 32'h02908820; 
 */  
/* //load store hazard test       
8'h00: instr = 32'h20100009; 
8'h04: instr = 32'h20110006; 
8'h08: instr = 32'h20120007;
8'h0c: instr = 32'h20150001;
8'h10: instr = 32'h0200A022;
8'h14: instr = 32'h8E110000; 
8'h18: instr = 32'hAE100000; 
*/
/* //branch hazard test       
8'h00: instr = 32'h20100009; 
8'h04: instr = 32'h20110009; 
8'h08: instr = 32'h20120007;
8'h0c: instr = 32'h20150001;
8'h10: instr = 32'h0200A022;
8'h14: instr = 32'h12110002; 
8'h18: instr = 32'h02119820; 
8'h1c: instr = 32'hAE110000;
8'h20: instr = 32'h8E320000; 
*/  
     
        
	     default:  instr = {32{1'bx}};	// unknown address
	   endcase
endmodule

module controller(input  logic[5:0] op, funct,
                  output logic     memtoreg, memwrite,
                  output logic     alusrc,
                  output logic     regdst, regwrite,
                  output logic[2:0] alucontrol,
                  output logic branch);

   logic [1:0] aluop;

   maindec md (op, memtoreg, memwrite, branch, alusrc, regdst, regwrite, aluop);

   aludec  ad (funct, aluop, alucontrol);

endmodule

// External data memory used by MIPS single-cycle processor

module dmem (input  logic        clk, we,
             input  logic[31:0]  a, wd,

             output logic[31:0]  rd);

   logic  [31:0] RAM[63:0];
  
   assign rd = RAM[a[31:2]];    // word-aligned  read (for lw)

   always_ff @(posedge clk)
     if (we)
       RAM[a[31:2]] <= wd;      // word-aligned write (for sw)

endmodule

module maindec (input logic[5:0] op, 
	              output logic memtoreg, memwrite, branch,
	              output logic alusrc, regdst, regwrite,
	              output logic[1:0] aluop );
   logic [8:0] controls;

   assign {regwrite, regdst, alusrc, branch, memwrite,
                memtoreg,  aluop} = controls;

  always_comb
    case(op)
      6'b000000: controls <= 9'b11000010; // R-type
      6'b100011: controls <= 9'b10100100; // LW
      6'b101011: controls <= 9'b00101000; // SW
      6'b000100: controls <= 9'b00010001; // BEQ
      6'b001000: controls <= 9'b10100000; // ADDI
      default:   controls <= 9'bxxxxxxxx; // illegal op
    endcase
endmodule

module aludec (input    logic[5:0] funct,
               input    logic[1:0] aluop,
               output   logic[2:0] alucontrol);
  always_comb
    case(aluop)
      2'b00: alucontrol  = 3'b010;  // add  (for lw/sw/addi)
      2'b01: alucontrol  = 3'b110;  // sub   (for beq)
      default: case(funct)          // R-TYPE instructions
          6'b100000: alucontrol  = 3'b010; // ADD
          6'b100010: alucontrol  = 3'b110; // SUB
          6'b100100: alucontrol  = 3'b000; // AND
          6'b100101: alucontrol  = 3'b001; // OR
          6'b101010: alucontrol  = 3'b111; // SLT
          default:   alucontrol  = 3'bxxx; // ???
        endcase
    endcase
endmodule

module regfile (input    logic clk, we3, 
                input    logic[4:0]  ra1, ra2, wa3, 
                input    logic[31:0] wd3, 
                output   logic[31:0] rd1, rd2);

  logic [31:0] rf [31:0];

  // three ported register file: read two ports combinationally
  // write third port on rising edge of clock. Register0 hardwired to 0.

  always_ff @(negedge clk)
     if (we3) 
         rf [wa3] <= wd3;	

  assign rd1 = (ra1 != 0) ? rf [ra1] : 0;
  assign rd2 = (ra2 != 0) ? rf[ ra2] : 0;

endmodule

module alu(input  logic [31:0] a, b, 
           input  logic [2:0]  alucont, 
           output logic [31:0] result);
    
    always_comb
        case(alucont)
            3'b010: result = a + b;
            3'b110: result = a - b;
            3'b000: result = a & b;
            3'b001: result = a | b;
            3'b111: result = (a < b) ? 1 : 0;
            default: result = {32{1'bx}};
        endcase
    
    
endmodule

module mux4 #(parameter WIDTH = 8)
             (input logic[WIDTH-1:0] d0, d1, d2, d3,
              input logic[1:0] s,
              output logic[WIDTH-1:0] y);
              
    always_comb
    begin
        case(s)
            2'b00:  y = d0;
            2'b01:  y = d1;
            2'b10:  y = d2;
            2'b11:  y = d3;
            default: y = 0;
        endcase
    end
 endmodule

module adder (input  logic[31:0] a, b,
              output logic[31:0] y);
     
     assign y = a + b;
endmodule

module sl2 (input  logic[31:0] a,
            output logic[31:0] y);
     
     assign y = {a[29:0], 2'b00}; // shifts left by 2
endmodule

module signext (input  logic[15:0] a,
                output logic[31:0] y);
              
  assign y = {{16{a[15]}}, a};    // sign-extends 16-bit a
endmodule


// paramaterized 2-to-1 

module mux2 #(parameter WIDTH = 8)
             (input  logic[WIDTH-1:0] d0, d1,  
              input  logic s, 
              output logic[WIDTH-1:0] y);
  
   assign y = s ? d1 : d0; 
endmodule

