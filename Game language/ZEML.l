if if
assignmentOperator =
newline \n
equal ==
lt <
lte <=
gt >
gte >=
comment ~
and and
or or
else else
not not
constantidentifier #
lp \(
rp \)
lb \{
rb \}
lsb \[
rsb \]
comma ,
semicolon \;
underscore _
dot \.
digit [0-9]
letter[a-zA-Z]
do doloop
while loop
return return
input zemin
output zemout
true true
false false
boolean_val true|false
int_number [+-]?({digit})+
float_number [+-]?{digit}*(\.)?{digit}+
char_ch \'[^\\\']\'
string_st \"(\\.|[^"\\])*\"
alphanumeric ({letter}|{digit})
identifier {letter}({alphanumeric}|_)*
CONSTANT {constantidentifier}{identifier}
integer int
char char
boolean_type boolean
string string
float float
function function
gamemap gamemap
createavatar createavatar
addroom addroom
movedirectly movedirectly
opendoor opendoor
pickupwlt pickupwlt
talkto talkto
jump jump
fight fight
createmonster createmonster
start start
addlist addlist
%%
{addlist} printf("ADD_LIST");
{start} printf("START_PROGRAM");
{function} printf("FUNCTION");
{gamemap} printf("GAME_MAP");
{createavatar} printf("CREATE_AVATAR");
{addroom} printf("ADD_ROOM");
{movedirectly} printf("MOVE_DIRECTLY");
{opendoor} printf("OPEN_DOOR");
{pickupwlt} printf("PICK_UP_WLT");
{talkto} printf("TALK_TO");
{jump} printf("JUMP");
{fight} printf("FIGHT");
{createmonster} printf("CREATE_MONSTER");
{boolean_val} printf("BOOLEAN_VAL");
{integer} printf("INT_TYPE");
{char} printf("CHAR_TYPE");
{boolean_type} printf("BOOL_TYPE");
{string} printf("STR_TYPE");
{float} printf("FLOAT_TYPE");
{if}  printf("IF");
{assignmentOperator} printf("ASSIGNMENT_OP");
{newline} printf("NEWLINE");
{equal} printf("EQUAL_OP");
{lt} printf("LT");
{lte} printf("LTE");
{gt} printf("GT");
{gte} printf("GTE");
{comment} printf("COMMENT");
{and} printf("AND");
{or} printf("OR");
{else} printf("ELSE");
{not} printf("NOT");
{constantidentifier} printf("CONST_IDENTIFIER");
{lp} printf("LP");
{rp} printf("RP");
{lb} printf("LB");
{rb} printf("RB");
{lsb} printf("LSB");
{rsb} printf("RSB");
{comma} printf("COMMA");
{semicolon} printf("SEMICOLON");
{underscore} printf("UNDERSCORE");
{dot} printf("DOT");
{digit} printf("DIGIT");
{do} printf("DO");
{while} printf("WHILE");
{return} printf("RETURN");
{input} printf("INPUT");
{output} printf("OUTPUT");
{int_number} printf("INT_NUMBER");
{float_number} printf("FLOAT_NUMBER");
{char_ch} printf("CHAR_VAL");
{string_st} printf("STRING_VAL");
{identifier} printf("IDENTIFIER");
{CONSTANT} printf("CONSTANT");

%%
main() {
      yylex();
    }
int yywrap() { return 1; }